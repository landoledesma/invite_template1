---
// Definir las imágenes directamente
const images = [
  '/img/wedd1.webp',
  '/img/wedd2.webp',
  // Añade aquí todas tus imágenes
];
---

<div class="relative w-full max-w-6xl mx-auto h-[600px] overflow-hidden">
  <div class="carousel-container flex transition-transform duration-500 h-full">
    {
      images.map((imgPath, index) => (
        <div class="carousel-slide w-full flex-shrink-0 h-full">
          <img
            src={imgPath}
            alt={`Imagen ${index + 1} de la pareja`}
            class="w-full h-full object-cover"
            loading={index === 0 ? "eager" : "lazy"}
          />
        </div>
      ))
    }
  </div>
  
  <!-- Botones de navegación -->
  <button 
    class="prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/50 hover:bg-white/75 p-2 rounded-full"
    aria-label="Anterior imagen"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  
  <button 
    class="next absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/50 hover:bg-white/75 p-2 rounded-full"
    aria-label="Siguiente imagen"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <!-- Indicadores -->
  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
    {
      images.map((_, index) => (
        <button
          class="indicator w-3 h-3 rounded-full bg-white/50 hover:bg-white/75"
          data-index={index}
          aria-label={`Ir a imagen ${index + 1}`}
        />
      ))
    }
  </div>
</div>

<style>
  .carousel-container {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  
  .carousel-slide {
    flex: 0 0 100%;
  }
</style>

<script>
  let currentSlide = 0;
  const container = document.querySelector('.carousel-container');
  const slides = document.querySelectorAll('.carousel-slide');
  const indicators = document.querySelectorAll('.indicator');
  const prevButton = document.querySelector('.prev');
  const nextButton = document.querySelector('.next');
  const totalSlides = slides.length;

  function updateCarousel() {
    if (!container) return;
    (container as HTMLElement).style.transform = `translateX(-${currentSlide * 100}%)`;
    
    // Actualizar indicadores
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('bg-white', index === currentSlide);
      indicator.classList.toggle('bg-white/50', index !== currentSlide);
    });
  }

  function nextSlide() {
    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
  }

  function prevSlide() {
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }

  // Event Listeners
  prevButton?.addEventListener('click', prevSlide);
  nextButton?.addEventListener('click', nextSlide);
  
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      currentSlide = index;
      updateCarousel();
    });
  });

  // Auto-play
  const autoPlayInterval = setInterval(nextSlide, 5000);

  // Detener auto-play cuando el usuario interactúa
  [prevButton, nextButton, ...indicators].forEach(element => {
    element?.addEventListener('click', () => {
      clearInterval(autoPlayInterval);
    });
  });

  // Actualizar el primer indicador al cargar
  window.addEventListener('load', () => {
    indicators[0]?.classList.add('bg-white');
    indicators[0]?.classList.remove('bg-white/50');
  });
</script>